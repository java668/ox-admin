package ${packageName}.service.impl;

import java.util.List;
import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.springframework.stereotype.Service;

import com.java668.common.model.PageResult;
import ${packageName}.dto.request.${ClassName}ReqDTO;
import ${packageName}.dto.response.${ClassName}RespDTO;
import ${packageName}.dto.request.${ClassName}PageReqDTO;

#if($table.sub)
import java.util.ArrayList;
import cn.hutool.core.collection.CollUtil;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.entity.${subClassName};
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.entity.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import lombok.RequiredArgsConstructor;

/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
@RequiredArgsConstructor
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service {

    /**
     * 新增${functionName}
     *
     * @param body ${functionName}
     * @return 结果
     */
    @Override
    #if($table.sub)
    @Transactional(rollbackFor = Exception.class)
    #end
    public Integer add(${ClassName}ReqDTO body) {
        ${ClassName} entity = BeanUtil.copyProperties(body, ${ClassName}.class);
    #if($table.sub)
        insert${subClassName}(entity);
        return baseMapper.insert(entity);
    #else
        return baseMapper.insert(entity);
    #end
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}主键
     * @return 结果
     */
    @Override
    #if($table.sub)
    @Transactional(rollbackFor = Exception.class)
    #end
    public Integer remove(List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
        #if($table.sub)
        baseMapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);
        #end
        return baseMapper.deleteByIds(${pkColumn.javaField}s);
    }

    /**
     * 修改${functionName}
     * 
     * @param body ${functionName}
     * @return 结果
     */
    @Override
    #if($table.sub)
    @Transactional(rollbackFor = Exception.class)
    #end
    public Integer update(${ClassName}ReqDTO body) {
        ${ClassName} entity = BeanUtil.copyProperties(body, ${ClassName}.class);
#if($table.sub)
        baseMapper.delete${subClassName}By${subTableFkClassName}(entity.get${pkColumn.capJavaField}());
        insert${subClassName}(entity);
#end

        return baseMapper.updateById(entity);
    }


    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}主键
     * @return ${functionName}
     */
    @Override
    public ${ClassName}RespDTO detail(${pkColumn.javaType} ${pkColumn.javaField}) {
        ${ClassName} entity = baseMapper.selectById(${pkColumn.javaField});
        return BeanUtil.copyProperties(entity, ${ClassName}RespDTO.class);
    }

    /**
     * 查询${functionName}列表
     *
     * @param req
     * @return ${functionName}
     */
    @Override
    public PageResult<${ClassName}RespDTO> page(${ClassName}PageReqDTO req) {
        LambdaQueryWrapper<${ClassName}> queryWrapper = Wrappers.lambdaQuery();
#foreach($column in $columns)
    #set($queryType=$column.queryType)
    #set($javaField=$column.javaField)
    #set($javaType=$column.javaType)
    #set($columnName=$column.columnName)
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    #if($column.query)
        #if($column.queryType == "EQ")
        #if($javaType == 'String')
        queryWrapper.eq(StrUtil.isNotBlank(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
        #else
        queryWrapper.eq(ObjectUtil.isNotNull(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
        #end
#elseif($queryType == "NE")
    #if($javaType == 'String')
        queryWrapper.ne(StrUtil.isNotBlank(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #else
        queryWrapper.ne(ObjectUtil.isNotNull(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #end
#elseif($queryType == "GT")
    #if($javaType == 'String')
        queryWrapper.gt(StrUtil.isNotBlank(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #else
        queryWrapper.gt(ObjectUtil.isNotNull(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #end
#elseif($queryType == "GTE")
    #if($javaType == 'String')
        queryWrapper.ge(StrUtil.isNotBlank(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #else
        queryWrapper.ge(ObjectUtil.isNotNull(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #end
#elseif($queryType == "LT")
    #if($javaType == 'String')
        queryWrapper.lt(StrUtil.isNotBlank(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #else
        queryWrapper.lt(ObjectUtil.isNotNull(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #end
#elseif($queryType == "LTE")
    #if($javaType == 'String')
        queryWrapper.le(StrUtil.isNotBlank(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #else
        queryWrapper.le(ObjectUtil.isNotNull(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #end
#elseif($queryType == "LIKE")
    #if($javaType == 'String')
        queryWrapper.like(StrUtil.isNotBlank(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #else
        queryWrapper.like(ObjectUtil.isNotNull(req.get$AttrName()), ${ClassName}::get$AttrName, req.get$AttrName());
    #end
#elseif($queryType == "BETWEEN")
    #if($javaType == 'String')
        queryWrapper.between(StrUtil.isAllNotBlank(req.getBegin$AttrName(), req.getEnd$AttrName()), ${ClassName}::get$AttrName, req.getBegin$AttrName(), req.getEnd$AttrName());
    #else
        queryWrapper.between(ObjectUtil.isAllNotEmpty(req.getBegin$AttrName(), req.getEnd$AttrName()), ${ClassName}::get$AttrName, req.getBegin$AttrName(),req.getEnd$AttrName());
    #end
#end
    #end
#end
        Page<${ClassName}> page = baseMapper.selectPage(req.buildPage(), queryWrapper);
        return PageResult.of(page, ${ClassName}RespDTO.class);
    }

#if($table.sub)

    /**
     * 新增${subTable.functionName}信息
     * 
     * @param ${className} ${functionName}对象
     */
    public void insert${subClassName}(${ClassName} ${className}) {
        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
        ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
        if (CollUtil.isNotEmpty(${subclassName}List)) {
            List<${subClassName}> list = new ArrayList<${subClassName}>();
            for (${subClassName} ${subclassName} : ${subclassName}List) {
                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                list.add(${subclassName});
            }
            if (list.size() > 0) {
                baseMapper.batch${subClassName}(list);
            }
        }
    }
#end
}
